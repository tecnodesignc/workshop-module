<?php

namespace Modules\$MODULE_NAME$\Http\Controllers\Admin;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Mockery\CountValidator\Exception;
use Modules\$MODULE_NAME$\Entities\$CLASS_NAME$;
use Modules\$MODULE_NAME$\Http\Requests\Create$CLASS_NAME$Request;
use Modules\$MODULE_NAME$\Http\Requests\Update$CLASS_NAME$Request;
use Modules\$MODULE_NAME$\Repositories\$CLASS_NAME$Repository;
use Modules\$MODULE_NAME$\Transformers\$CLASS_NAME$Transformer;
use Modules\Core\Http\Controllers\Api\BaseApiController;
use Modules\User\Contracts\Authentication;

class $CLASS_NAME$Controller extends BaseApiController
{
    /**
     * @var $CLASS_NAME$Repository
     */
    private $CLASS_NAME$Repository $$LOWERCASE_CLASS_NAME$;

    public function __construct($CLASS_NAME$Repository $$LOWERCASE_CLASS_NAME$)
    {
        parent::__construct();

        $this->$LOWERCASE_CLASS_NAME$ = $$LOWERCASE_CLASS_NAME$;
         $this->auth = app(Authentication::class);
    }

    /**
    * Get listing of the resource
    *
    * @return JsonResponse
    */
    public function index(Request $request): JsonResponse
    {
        try {

          $params = $this->getParamsRequest($request);

          $$PLURAL_LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->getItemsBy($params);

          $response = ["data" => $CLASS_NAME$Transformer::collection($$PLURAL_LOWERCASE_CLASS_NAME$)];

          $params->page ? $response["meta"] = ["page" => $this->pageTransformer($$PLURAL_LOWERCASE_CLASS_NAME$)] : false;

        } catch (Exception $e) {

            \Log::Error($e);
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);
    }
    /**
    * Get a resource item
    * @param string $criteria
    * @return JsonResponse
    */
    public function show(string $criteria, Request $request): JsonResponse
    {
        try {

          $params = $this->getParamsRequest($request);

          $$LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->getItem($params);

          if(!$$LOWERCASE_CLASS_NAME$) throw new Exception(trans('core::core.exceptions.item no found', ['item' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')]),404);

          $response = ["data" => new $CLASS_NAME$Transformer($$LOWERCASE_CLASS_NAME$)];

        } catch (Exception $e) {

            \Log::Error($e);
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);
    }

    /**
    * Store a newly created resource in storage.
    *
    * @param Request $request
    * @return JsonResponse
    */
    public function store(Request $request): JsonResponse
    {
        \DB::beginTransaction();

        try {

            $data = $request->input('attributes') ?? [];

            $this->validateRequestApi(new Create$CLASS_NAME$Request($data));

            $$LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->create($data);

            $response = ["data" => new $CLASS_NAME$Transformer($$LOWERCASE_CLASS_NAME$)];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }

    /**
    * Update the specified resource in storage..
    *
    * @param string $criteria
    * @param Request $request
    * @return JsonResponse
    */
    public function update(string $criteria, Request $request): JsonResponse
    {
        \DB::beginTransaction();

        try {

            $data = $request->input('attributes') ?? [];

            $this->validateRequestApi(new Update$CLASS_NAME$Request($data));

            $params = $this->getParamsRequest($request);

            $$LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->getItem($params);

            if(!$$LOWERCASE_CLASS_NAME$) throw new Exception(trans('core::core.exceptions.item no found', ['item' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')]),404);

            $this->$LOWERCASE_CLASS_NAME$->update($$LOWERCASE_CLASS_NAME$, $request->all());

            $response = ["data" => trans('core::core.messages.resource updated', ['name' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')])];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }

    /**
    * Remove the specified resource from storage.
    *
    * @param string $criteria
    * @param Request $request
    * @return JsonResponse
    */
    public function destroy(string $criteria, Request $request): JsonResponse
    {
        \DB::beginTransaction();

        try {

            $params = $this->getParamsRequest($request);

            $$LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->getItem($params);

            if(!$$LOWERCASE_CLASS_NAME$) throw new Exception(trans('core::core.exceptions.item no found', ['item' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')]),404);

            $this->$LOWERCASE_CLASS_NAME$->destroy($$LOWERCASE_CLASS_NAME$);

            $response = ["data" => trans('core::core.messages.resource deleted', ['name' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')])];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }
}
