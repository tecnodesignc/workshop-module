<?php

namespace Modules\$MODULE_NAME$\Http\Controllers\Api;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Mockery\CountValidator\Exception;
use Modules\$MODULE_NAME$\Entities\$CLASS_NAME$;
use Modules\$MODULE_NAME$\Http\Requests\Create$CLASS_NAME$Request;
use Modules\$MODULE_NAME$\Http\Requests\Update$CLASS_NAME$Request;
use Modules\$MODULE_NAME$\Repositories\$CLASS_NAME$Repository;
use Modules\$MODULE_NAME$\Transformers\$CLASS_NAME$Transformer;
use Modules\Core\Http\Controllers\Api\BaseApiController;
use Modules\User\Contracts\Authentication;

class $CLASS_NAME$ApiController extends BaseApiController
{
    /**
     * @var $CLASS_NAME$Repository
     */
    private $CLASS_NAME$Repository $$LOWERCASE_CLASS_NAME$;

    public function __construct($CLASS_NAME$Repository $$LOWERCASE_CLASS_NAME$)
    {
        parent::__construct();

        $this->$LOWERCASE_CLASS_NAME$ = $$LOWERCASE_CLASS_NAME$;
        $this->auth = app(Authentication::class);
    }

    /**
    * Get listing of the resource
    *
    * @return JsonResponse
    */
    public function index(Request $request): JsonResponse
    {
        try {

          $params = $this->getParamsRequest($request);

          $$PLURAL_LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->getItemsBy($params);

          $response = ["data" => $CLASS_NAME$Transformer::collection($$PLURAL_LOWERCASE_CLASS_NAME$)];

          $params->page ? $response["meta"] = ["page" => $this->pageTransformer($$PLURAL_LOWERCASE_CLASS_NAME$)] : false;

        } catch (Exception $e) {

            \Log::Error($e);
            $status = $this->getStatusError($e->getCode());
            $response = ["error" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);
    }
    /**
    * Show resource item.
    * @param $CLASS_NAME$ $$LOWERCASE_CLASS_NAME$
    * @return JsonResponse
    */
    public function show($CLASS_NAME$ $$LOWERCASE_CLASS_NAME$): JsonResponse
    {
        try {

          $response = ["data" => new $CLASS_NAME$Transformer($$LOWERCASE_CLASS_NAME$)];

        } catch (Exception $e) {

            \Log::Error($e);
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);
    }

    /**
    * Store a newly created resource in storage.
    *
    * @param Request $request
    * @return JsonResponse
    */
    public function store(Create$CLASS_NAME$Request $request): JsonResponse
    {
        \DB::beginTransaction();

        try {
            $data = $request->all();
            $$LOWERCASE_CLASS_NAME$ = $this->$LOWERCASE_CLASS_NAME$->create($data);

            $response = ["data" => new $CLASS_NAME$Transformer($$LOWERCASE_CLASS_NAME$)];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }

    /**
    * Update the specified resource in storage..
    *
    * @param  $CLASS_NAME$ $$LOWERCASE_CLASS_NAME$
    * @param  Update$CLASS_NAME$Request $request
    * @return JsonResponse
    */
    public function update($CLASS_NAME$ $$LOWERCASE_CLASS_NAME$, Update$CLASS_NAME$Request $request): JsonResponse
    {
        \DB::beginTransaction();

        try {

            $this->$LOWERCASE_CLASS_NAME$->update($$LOWERCASE_CLASS_NAME$, $request->all());

            $response = ["data" => trans('core::core.messages.resource updated', ['name' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')])];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }

    /**
    * Remove the specified resource from storage.
    *
    * @param  $CLASS_NAME$ $$LOWERCASE_CLASS_NAME$
    * @return JsonResponse
    */
    public function destroy($CLASS_NAME$ $$LOWERCASE_CLASS_NAME$): JsonResponse
    {
        \DB::beginTransaction();

        try {

            $this->$LOWERCASE_CLASS_NAME$->destroy($$LOWERCASE_CLASS_NAME$);

            $response = ["data" => trans('core::core.messages.resource deleted', ['name' => trans('$LOWERCASE_MODULE_NAME$::$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$')])];

            \DB::commit();

        } catch (Exception $e) {

            \Log::Error($e);
            \DB::rollback();
            $status = $this->getStatusError($e->getCode());
            $response = ["errors" => $e->getMessage()];

        }

        return response()->json($response ?? ["data" => "Request successful"], $status ?? 200);

    }
}
